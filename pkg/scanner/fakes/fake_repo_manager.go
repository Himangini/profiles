// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/fluxcd/source-controller/api/v1beta1"
	"github.com/weaveworks/profiles/api/v1alpha1"
	"github.com/weaveworks/profiles/pkg/gitrepository"
	"github.com/weaveworks/profiles/pkg/scanner"
)

type FakeGitRepositoryManager struct {
	CreateAndWaitForResourcesStub        func(v1alpha1.Repository, []gitrepository.Instance) ([]*v1beta1.GitRepository, error)
	createAndWaitForResourcesMutex       sync.RWMutex
	createAndWaitForResourcesArgsForCall []struct {
		arg1 v1alpha1.Repository
		arg2 []gitrepository.Instance
	}
	createAndWaitForResourcesReturns struct {
		result1 []*v1beta1.GitRepository
		result2 error
	}
	createAndWaitForResourcesReturnsOnCall map[int]struct {
		result1 []*v1beta1.GitRepository
		result2 error
	}
	DeleteResourcesStub        func([]*v1beta1.GitRepository) error
	deleteResourcesMutex       sync.RWMutex
	deleteResourcesArgsForCall []struct {
		arg1 []*v1beta1.GitRepository
	}
	deleteResourcesReturns struct {
		result1 error
	}
	deleteResourcesReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGitRepositoryManager) CreateAndWaitForResources(arg1 v1alpha1.Repository, arg2 []gitrepository.Instance) ([]*v1beta1.GitRepository, error) {
	var arg2Copy []gitrepository.Instance
	if arg2 != nil {
		arg2Copy = make([]gitrepository.Instance, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.createAndWaitForResourcesMutex.Lock()
	ret, specificReturn := fake.createAndWaitForResourcesReturnsOnCall[len(fake.createAndWaitForResourcesArgsForCall)]
	fake.createAndWaitForResourcesArgsForCall = append(fake.createAndWaitForResourcesArgsForCall, struct {
		arg1 v1alpha1.Repository
		arg2 []gitrepository.Instance
	}{arg1, arg2Copy})
	stub := fake.CreateAndWaitForResourcesStub
	fakeReturns := fake.createAndWaitForResourcesReturns
	fake.recordInvocation("CreateAndWaitForResources", []interface{}{arg1, arg2Copy})
	fake.createAndWaitForResourcesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGitRepositoryManager) CreateAndWaitForResourcesCallCount() int {
	fake.createAndWaitForResourcesMutex.RLock()
	defer fake.createAndWaitForResourcesMutex.RUnlock()
	return len(fake.createAndWaitForResourcesArgsForCall)
}

func (fake *FakeGitRepositoryManager) CreateAndWaitForResourcesCalls(stub func(v1alpha1.Repository, []gitrepository.Instance) ([]*v1beta1.GitRepository, error)) {
	fake.createAndWaitForResourcesMutex.Lock()
	defer fake.createAndWaitForResourcesMutex.Unlock()
	fake.CreateAndWaitForResourcesStub = stub
}

func (fake *FakeGitRepositoryManager) CreateAndWaitForResourcesArgsForCall(i int) (v1alpha1.Repository, []gitrepository.Instance) {
	fake.createAndWaitForResourcesMutex.RLock()
	defer fake.createAndWaitForResourcesMutex.RUnlock()
	argsForCall := fake.createAndWaitForResourcesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeGitRepositoryManager) CreateAndWaitForResourcesReturns(result1 []*v1beta1.GitRepository, result2 error) {
	fake.createAndWaitForResourcesMutex.Lock()
	defer fake.createAndWaitForResourcesMutex.Unlock()
	fake.CreateAndWaitForResourcesStub = nil
	fake.createAndWaitForResourcesReturns = struct {
		result1 []*v1beta1.GitRepository
		result2 error
	}{result1, result2}
}

func (fake *FakeGitRepositoryManager) CreateAndWaitForResourcesReturnsOnCall(i int, result1 []*v1beta1.GitRepository, result2 error) {
	fake.createAndWaitForResourcesMutex.Lock()
	defer fake.createAndWaitForResourcesMutex.Unlock()
	fake.CreateAndWaitForResourcesStub = nil
	if fake.createAndWaitForResourcesReturnsOnCall == nil {
		fake.createAndWaitForResourcesReturnsOnCall = make(map[int]struct {
			result1 []*v1beta1.GitRepository
			result2 error
		})
	}
	fake.createAndWaitForResourcesReturnsOnCall[i] = struct {
		result1 []*v1beta1.GitRepository
		result2 error
	}{result1, result2}
}

func (fake *FakeGitRepositoryManager) DeleteResources(arg1 []*v1beta1.GitRepository) error {
	var arg1Copy []*v1beta1.GitRepository
	if arg1 != nil {
		arg1Copy = make([]*v1beta1.GitRepository, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.deleteResourcesMutex.Lock()
	ret, specificReturn := fake.deleteResourcesReturnsOnCall[len(fake.deleteResourcesArgsForCall)]
	fake.deleteResourcesArgsForCall = append(fake.deleteResourcesArgsForCall, struct {
		arg1 []*v1beta1.GitRepository
	}{arg1Copy})
	stub := fake.DeleteResourcesStub
	fakeReturns := fake.deleteResourcesReturns
	fake.recordInvocation("DeleteResources", []interface{}{arg1Copy})
	fake.deleteResourcesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGitRepositoryManager) DeleteResourcesCallCount() int {
	fake.deleteResourcesMutex.RLock()
	defer fake.deleteResourcesMutex.RUnlock()
	return len(fake.deleteResourcesArgsForCall)
}

func (fake *FakeGitRepositoryManager) DeleteResourcesCalls(stub func([]*v1beta1.GitRepository) error) {
	fake.deleteResourcesMutex.Lock()
	defer fake.deleteResourcesMutex.Unlock()
	fake.DeleteResourcesStub = stub
}

func (fake *FakeGitRepositoryManager) DeleteResourcesArgsForCall(i int) []*v1beta1.GitRepository {
	fake.deleteResourcesMutex.RLock()
	defer fake.deleteResourcesMutex.RUnlock()
	argsForCall := fake.deleteResourcesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGitRepositoryManager) DeleteResourcesReturns(result1 error) {
	fake.deleteResourcesMutex.Lock()
	defer fake.deleteResourcesMutex.Unlock()
	fake.DeleteResourcesStub = nil
	fake.deleteResourcesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGitRepositoryManager) DeleteResourcesReturnsOnCall(i int, result1 error) {
	fake.deleteResourcesMutex.Lock()
	defer fake.deleteResourcesMutex.Unlock()
	fake.DeleteResourcesStub = nil
	if fake.deleteResourcesReturnsOnCall == nil {
		fake.deleteResourcesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteResourcesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGitRepositoryManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createAndWaitForResourcesMutex.RLock()
	defer fake.createAndWaitForResourcesMutex.RUnlock()
	fake.deleteResourcesMutex.RLock()
	defer fake.deleteResourcesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGitRepositoryManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ scanner.GitRepositoryManager = new(FakeGitRepositoryManager)
