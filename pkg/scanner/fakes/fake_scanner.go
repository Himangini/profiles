// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/weaveworks/profiles/api/v1alpha1"
	"github.com/weaveworks/profiles/pkg/scanner"
	v1 "k8s.io/api/core/v1"
)

type FakeRepoScanner struct {
	ScanRepositoryStub        func(v1alpha1.Repository, *v1.Secret, []string) ([]v1alpha1.ProfileCatalogEntry, []string, error)
	scanRepositoryMutex       sync.RWMutex
	scanRepositoryArgsForCall []struct {
		arg1 v1alpha1.Repository
		arg2 *v1.Secret
		arg3 []string
	}
	scanRepositoryReturns struct {
		result1 []v1alpha1.ProfileCatalogEntry
		result2 []string
		result3 error
	}
	scanRepositoryReturnsOnCall map[int]struct {
		result1 []v1alpha1.ProfileCatalogEntry
		result2 []string
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRepoScanner) ScanRepository(arg1 v1alpha1.Repository, arg2 *v1.Secret, arg3 []string) ([]v1alpha1.ProfileCatalogEntry, []string, error) {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.scanRepositoryMutex.Lock()
	ret, specificReturn := fake.scanRepositoryReturnsOnCall[len(fake.scanRepositoryArgsForCall)]
	fake.scanRepositoryArgsForCall = append(fake.scanRepositoryArgsForCall, struct {
		arg1 v1alpha1.Repository
		arg2 *v1.Secret
		arg3 []string
	}{arg1, arg2, arg3Copy})
	stub := fake.ScanRepositoryStub
	fakeReturns := fake.scanRepositoryReturns
	fake.recordInvocation("ScanRepository", []interface{}{arg1, arg2, arg3Copy})
	fake.scanRepositoryMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeRepoScanner) ScanRepositoryCallCount() int {
	fake.scanRepositoryMutex.RLock()
	defer fake.scanRepositoryMutex.RUnlock()
	return len(fake.scanRepositoryArgsForCall)
}

func (fake *FakeRepoScanner) ScanRepositoryCalls(stub func(v1alpha1.Repository, *v1.Secret, []string) ([]v1alpha1.ProfileCatalogEntry, []string, error)) {
	fake.scanRepositoryMutex.Lock()
	defer fake.scanRepositoryMutex.Unlock()
	fake.ScanRepositoryStub = stub
}

func (fake *FakeRepoScanner) ScanRepositoryArgsForCall(i int) (v1alpha1.Repository, *v1.Secret, []string) {
	fake.scanRepositoryMutex.RLock()
	defer fake.scanRepositoryMutex.RUnlock()
	argsForCall := fake.scanRepositoryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRepoScanner) ScanRepositoryReturns(result1 []v1alpha1.ProfileCatalogEntry, result2 []string, result3 error) {
	fake.scanRepositoryMutex.Lock()
	defer fake.scanRepositoryMutex.Unlock()
	fake.ScanRepositoryStub = nil
	fake.scanRepositoryReturns = struct {
		result1 []v1alpha1.ProfileCatalogEntry
		result2 []string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRepoScanner) ScanRepositoryReturnsOnCall(i int, result1 []v1alpha1.ProfileCatalogEntry, result2 []string, result3 error) {
	fake.scanRepositoryMutex.Lock()
	defer fake.scanRepositoryMutex.Unlock()
	fake.ScanRepositoryStub = nil
	if fake.scanRepositoryReturnsOnCall == nil {
		fake.scanRepositoryReturnsOnCall = make(map[int]struct {
			result1 []v1alpha1.ProfileCatalogEntry
			result2 []string
			result3 error
		})
	}
	fake.scanRepositoryReturnsOnCall[i] = struct {
		result1 []v1alpha1.ProfileCatalogEntry
		result2 []string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRepoScanner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.scanRepositoryMutex.RLock()
	defer fake.scanRepositoryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRepoScanner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ scanner.RepoScanner = new(FakeRepoScanner)
